name: Build e Deploy da Imagem Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout do cÃ³digo
      uses: actions/checkout@v4

    - name: Instalar pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Instalar dependÃªncias
      run: pnpm install --frozen-lockfile

    - name: Executar verificaÃ§Ã£o de tipos
      run: pnpm check

    - name: Build da aplicaÃ§Ã£o
      run: pnpm build

    - name: Login no Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build e push da imagem Docker
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Build da imagem Docker (apenas para PR)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy executado com sucesso
      run: |
        echo "ðŸš€ Imagem Docker buildada e publicada com sucesso!"
        echo "ðŸ“¦ Imagem disponÃ­vel em: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "âœ… Pronto para deploy com Pulumi"